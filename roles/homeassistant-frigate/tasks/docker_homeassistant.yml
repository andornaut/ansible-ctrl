---
- name: Resolve Home Assistant device paths
  include_tasks: resolve_device.yml
  vars:
    device_paths: "{{ homeassistantfrigate_homeassistant_devices }}"
    resolved_var_name: homeassistant_devices_resolved

- name: Remove Home Assistant and Mosquitto containers if they exist
  community.docker.docker_container:
    name: "{{ item }}"
    state: absent
  loop:
    - govee2mqtt
    - homeassistant
    - mosquitto
  ignore_errors: true

- name: Start Home Assistant and Mosquitto Docker containers
  vars:
    homeassistant_base_volumes:
      - /etc/hosts:/etc/hosts:ro
      - "{{ homeassistantfrigate_homeassistant_required_volumes.config }}:/config"
      - "{{ homeassistantfrigate_homeassistant_required_volumes.dbus }}:/run/dbus:ro"
      - "{{ homeassistantfrigate_homeassistant_required_volumes.udev }}:/run/udev:ro"
    homeassistant_volumes: "{{ common_volumes + homeassistant_base_volumes + homeassistantfrigate_homeassistant_extra_volumes }}"

    mosquitto_base_volumes:
      - "{{ homeassistantfrigate_mosquitto_required_volumes.config }}:/mosquitto/config:ro"
      - "{{ homeassistantfrigate_mosquitto_required_volumes.data }}:/mosquitto/data"
      - "{{ homeassistantfrigate_mosquitto_required_volumes.log }}:/mosquitto/log"
    mosquitto_volumes: "{{ common_volumes + mosquitto_base_volumes }}"

    govee2mqtt_base_volumes:
      - "{{ homeassistantfrigate_govee2mqtt_required_volumes.data }}:/data"
    govee2mqtt_volumes: "{{ common_volumes + govee2mqtt_base_volumes }}"

    govee2mqtt_base_environment:
      GOVEE_MQTT_HOST: 127.0.0.1
      GOVEE_MQTT_PORT: "{{ homeassistantfrigate_mosquitto_port }}"
      GOVEE_TEMPERATURE_SCALE: C
      RUST_LOG_STYLE: always
      TZ: "{{ TZ }}"
    govee2mqtt_environment: "{{ govee2mqtt_base_environment | combine(homeassistantfrigate_govee2mqtt_env | default({})) }}"

    govee2mqtt_service:
      govee2mqtt:
        # http://localhost:8056
        container_name: govee2mqtt
        hostname: govee2mqtt-{{ ansible_hostname }}
        image: "{{ homeassistantfrigate_govee2mqtt_docker_image }}"
        depends_on:
          - homeassistant
          - mosquitto
        environment: "{{ govee2mqtt_environment }}"
        logging: "{{ default_logging }}"
        network_mode: host
        restart: unless-stopped
        volumes: "{{ govee2mqtt_volumes }}"

    required_services:
      homeassistant:
        # http://localhost:8123
        container_name: homeassistant
        image: "{{ homeassistantfrigate_homeassistant_docker_image }}"
        depends_on:
          - mosquitto
        devices: "{{ homeassistant_devices_resolved }}"
        logging: "{{ default_logging }}"
        # Required to support Google Cast if Avahi is disabled
        # n.b. Can only run one of Avahi or otbr/thread on the host
        network_mode: host
        restart: unless-stopped
        security_opt:
          - "apparmor=docker-ble-policy"
        volumes: "{{ homeassistant_volumes }}"

      mosquitto:
        container_name: mosquitto
        image: "{{ homeassistantfrigate_mosquitto_docker_image }}"
        logging: "{{ default_logging }}"
        ports:
          - "{{ homeassistantfrigate_mosquitto_port }}:1883"
        restart: unless-stopped
        volumes: "{{ mosquitto_volumes }}"

  community.docker.docker_compose_v2:
    project_name: homeassistantfrigate
    pull: always
    remove_orphans: true
    definition:
      networks:
        default:
          driver: bridge
          enable_ipv6: "{{ homeassistantfrigate_ipv6_enabled }}"
          driver_opts:
            com.docker.network.bridge.name: br-ha
      services: >-
        {{
          required_services | combine(govee2mqtt_service if homeassistantfrigate_install_govee2mqtt else {})
        }}

- name: Get container info for mosquitto
  community.docker.docker_container_info:
    name: "{{ item }}"
  loop:
    - mosquitto
    # Exclude homeassistant and govee2mqtt, because they're configured with network_mode:host
  register: container_infos

- name: Update /etc/hosts with container IPs
  lineinfile:
    path: /etc/hosts
    regexp: '^\S+\s+{{ item.item }}'
    line: "{{ item.container.NetworkSettings.Networks[homeassistantfrigate_docker_network_name].IPAddress }} {{ item.item }}"
  become: true
  loop: "{{ container_infos.results }}"
  no_log: true # The CLI output would be too verbose without no_log
