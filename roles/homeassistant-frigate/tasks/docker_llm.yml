---
- name: Remove Ollama and OpenWebUI containers if they exist
  community.docker.docker_container:
    name: "{{ item }}"
    state: absent
  loop:
    - ollama
    - openwebui
  ignore_errors: true

- name: Start LLM Docker containers
  vars:
    ollama_base_volumes:
      - "{{ homeassistantfrigate_ollama_required_volumes.data }}:/root/.ollama"
    ollama_volumes: "{{ common_volumes + ollama_base_volumes }}"

    openwebui_base_volumes:
      - "{{ homeassistantfrigate_openwebui_required_volumes.data }}:/app/backend/data"
    openwebui_volumes: "{{ common_volumes + openwebui_base_volumes }}"

  community.docker.docker_compose_v2:
    project_name: homeassistantfrigate-llm
    pull: always
    remove_orphans: true
    definition:
      networks: "{{ external_network }}"
      services:
        ollama:
          # http://ollama:11434
          container_name: ollama
          image: "{{ homeassistantfrigate_ollama_docker_image }}"
          devices: "{{ homeassistantfrigate_ollama_devices }}"
          group_add:
            - "{{ getent_group.render[1] }}"
            - "{{ getent_group.video[1] }}"
          logging: "{{ default_logging }}"
          restart: unless-stopped
          # https://docs.docker.com/reference/cli/docker/container/run/#security-opt
          # https://docs.docker.com/engine/security/seccomp/#run-without-the-default-seccomp-profile
          security_opt:
            - seccomp=unconfined
          volumes: "{{ ollama_volumes }}"

        openwebui:
          container_name: openwebui
          image: "{{ homeassistantfrigate_openwebui_docker_image }}"
          logging: "{{ default_logging }}"
          ports:
            - "{{ homeassistantfrigate_openwebui_port }}:8080"
          restart: unless-stopped
          volumes: "{{ openwebui_volumes }}"
          depends_on:
            - ollama

- name: Get container info for ollama and openwebui
  community.docker.docker_container_info:
    name: "{{ item }}"
  loop:
    - ollama
    - openwebui
  register: container_infos

- name: Update /etc/hosts with container IPs
  lineinfile:
    path: /etc/hosts
    regexp: '^\S+\s+{{ item.item }}'
    line: "{{ item.container.NetworkSettings.Networks[homeassistantfrigate_docker_network_name].IPAddress }} {{ item.item }}"
  become: true
  loop: "{{ container_infos.results }}"
  no_log: true # The CLI output would be too verbose without no_log
