{% if item.item.content is defined %}
    {{ item.item.content }}
{% endif %}

# HTTP redirect to HTTPS
server {
    listen 80;
    listen [::]:80;  # Add IPv6 support
    server_name {{ item.item.domain }} www.{{ item.item.domain }};
    access_log off;
    error_log off;
    log_not_found off;

    # Security headers
    add_header Content-Security-Policy "default-src 'self';" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://{{ item.item.domain }}$request_uri;
    }

    # Allow ACME challenge access over HTTP
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/{{ item.item.domain }};
        access_log on;
        error_log on;
        log_not_found on;
        allow all;
    }
}

# HTTPS www redirect
server {
    listen 443 quic;
    listen 443 ssl http2;
    listen [::]:443 quic;
    listen [::]:443 ssl http2;
    server_name www.{{ item.item.domain }};
    access_log off;
    error_log off;
    log_not_found off;

    # SSL configuration
{% if not item.stat.exists or item.item.use_selfsigned_certificate | default(False) %}
    include /etc/nginx/conf.d/partial/selfsigned_certificate;
{% else %}
    ssl_certificate /etc/nginx/conf.d/ssl/crt/{{ item.item.csr_common_name|default(item.item.domain)|replace('*', '_') }}.crt;
    ssl_certificate_key /etc/nginx/conf.d/ssl/key/private.pem;
{% endif %}

    # Security headers
    add_header Content-Security-Policy "default-src 'self'; upgrade-insecure-requests;" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    # TODO: Make optional, b/c this breaks on self-signed certificates
    #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Redirect www to non-www
    return 301 https://{{ item.item.domain }}$request_uri;
}

# Main HTTPS server
server {
    listen 443 quic;
    listen 443 ssl http2;
    listen [::]:443 quic;
    listen [::]:443 ssl http2;
    server_name {{ item.item.domain }};

    # Access control configuration
{% if item.item.permit_untrusted_networks | default(False) %}
    satisfy any;
{% else %}
    satisfy all;
{% endif %}

    # Always allow localhost
    allow 127.0.0.1/32;
    allow ::1/128;

    # Allow trusted networks
{% for network in item.item.trusted_networks | default([]) %}
    allow {{ network }};
{% endfor %}

{% if not item.item.permit_untrusted_networks | default(False)
        or item.item.credentials | default(False)
        or item.item.trusted_network | default(False) %}
    # Deny access if required conditions aren't met
    deny all;
{% endif %}

{% if item.item.credentials | default(False) %}
    # Basic auth configuration
    auth_basic "Restricted Content";
    auth_basic_user_file /etc/nginx/conf.d/basicauth/{{ item.item.domain }}.htpasswd;
{% endif %}

    # SSL configuration
{% if not item.stat.exists or item.item.use_selfsigned_certificate | default(False) %}
    include /etc/nginx/conf.d/partial/selfsigned_certificate;
{% else %}
    ssl_certificate /etc/nginx/conf.d/ssl/crt/{{ item.item.csr_common_name|default(item.item.domain)|replace('*', '_') }}.crt;
    ssl_certificate_key /etc/nginx/conf.d/ssl/key/private.pem;

    # ACME challenge location
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/{{ item.item.domain }};
        access_log on;
        error_log on;
        log_not_found on;
        allow all;
    }
{% endif %}

    # Security headers
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    # TODO: Make optional, b/c this breaks homeassistant and frigate
    #add_header Content-Security-Policy "default-src 'self'; upgrade-insecure-requests;" always;
    # TODO: Make optional, b/c this breaks on self-signed certificates
    #add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;


{% if item.item.websocket_paths | default(False) %}
    # Dedicated WebSocket locations
{% for websocket_path in item.item.websocket_paths %}
{% if websocket_path != '/' %}
    # We skip '/' because a WebSocket configuration for the root path is already added above
    location {{ websocket_path }} {
        include /etc/nginx/conf.d/partial/common_proxy_configuration;

        {% if item.item.proxy_https | default(False) %}
            proxy_pass https://127.0.0.1:{{ item.item.proxy_port }}{{ websocket_path }};
            # Redirect HTTP to HTTPS in proxy responses
            proxy_redirect ~*^http([^s].*)$ https$1;
        {% else %}
            proxy_pass http://127.0.0.1:{{ item.item.proxy_port }}{{ websocket_path }};
        {% endif %}
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
    }
{% endif %}
{% endfor %}
{% endif %}

{% for location in item.item.locations | default([]) %}
    # Additional location configurations
    location {{ location.src }} {
        alias {{ location.dest }};
        autoindex on;

        # Access control configuration
{% if item.item.permit_untrusted_networks | default(False) %}
        satisfy any;
{% else %}
        satisfy all;
{% endif %}

        # Always allow localhost
        allow 127.0.0.1/32;
        allow ::1/128;

        # Allow trusted networks
{% for network in item.item.trusted_networks | default([]) %}
        allow {{ network }};
{% endfor %}

{% if not location.permit_untrusted_networks | default(False)
        or location.credentials | default(False)
        or item.item.credentials | default(False)
        or item.item.trusted_network | default(False) %}
        # Deny access if required conditions aren't met
        deny all;
{% endif %}

{% if location.credentials | default(False) %}
        # Basic auth configuration
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/conf.d/basicauth/{{ location.credentials.file_basename }}.htpasswd;
{% elif item.item.credentials | default(False) %}
        # Basic auth configuration
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/conf.d/basicauth/{{ item.item.domain }}.htpasswd;
{% endif %}
    }
{% endfor %}

    # Main location configuration
    location / {
{% if item.item.proxy_port is defined %}
        include /etc/nginx/conf.d/partial/common_proxy_configuration;

{% if item.item.proxy_remove_authorization_header | default(False) %}
        # Remove Authorization header for specific services (e.g., Unifi)
        proxy_set_header Authorization "";
{% endif %}

{% if item.item.proxy_https | default(False) %}
        proxy_pass https://127.0.0.1:{{ item.item.proxy_port }};
        # Redirect HTTP to HTTPS in proxy responses
        proxy_redirect ~*^http([^s].*)$ https$1;
{% else %}
        proxy_pass http://127.0.0.1:{{ item.item.proxy_port }};
{% endif %}
{% else %}
        root /var/www/{{ item.item.domain }}{% if item.item.path is defined %}/{{ item.item.path }}{% endif %};
{% if item.item.default_path | default(False)%}
        try_files $uri $uri/ {{ item.item.default_path }};
{% endif %}
{% endif %}

{% if item.item.proxy_content is defined %}
        {{ item.item.proxy_content }}
{% endif %}

{% if '/' in item.item.websocket_paths | default([]) %}
        # WebSocket configuration for root path
        # e.g. https://docs.frigate.video/guides/reverse_proxy/#setup-reverse-proxy-settings
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;
{% endif %}
    }

    include /etc/nginx/conf.d/partial/common_site_configuration;
}
