#!/bin/bash

set -e

[[ ${EUID} -eq 0 ]] || { echo 'Must be run as root'>&2; exit 1; }

RETENTION="{{ nas_backup_directories_retention }}"
RETRY_SECS=10

if [[ $# -eq 0 ]]; then
    name=nasbackup
    backupDir="{{ nas_backup_directory }}"
elif [[ $# -eq 2 ]]; then
    name="${1}"
    backupDir="${2}"
else
    echo "Usage: $(basename "${0}") luksName /media/nas/backups">&2
    exit 1
fi

[[ -d "${backupDir}" ]] || { echo "Backup dir does not exist: ${backupDir}">&2; exit 1; }

echo "Backup dir: ${backupDir}"

closeLuks() {
	name="${1}"
	# May not be mounted
	mount_dirs="$(findmnt -rno TARGET "/dev/mapper/${name}")" || true
	if [[ -n "${mount_dirs}" ]]; then
	    echo "Unmounting: ${mount_dirs}"
	    for mountDir in "${mount_dirs}"; do
		if ! umount "${mountDir}"; then
		    echo "Sleeping for ${RETRY_SECS} seconds"
		    sleep ${RETRY_SECS}
		    umount "${mountDir}"
		fi
	    done
	fi

	echo "Closing LUKS device: ${name}"
	cryptsetup luksClose "${name}"
}

openLuks() {
	name="${1}"
	cryptsetup status ${name}>/dev/null || cryptdisks_start ${name}
}

openLuks "${name}"

if mountDir="$(findmnt -rno TARGET "/dev/mapper/${name}")"; then
    # It may be mounted to multiple mount points, so take the first one.
    mountDir="$(echo -n "${mountDir}"|head -1)"
else
    mountDir="$(mktemp -d)"
    mount /dev/mapper/${name} ${mountDir}
fi
echo "Mount dir: ${mountDir}"

# eg. /tmp/tmp.xxx/backup.2018-12-30
targetDir="${mountDir}/$(date -d @$(stat --format=%Y "${backupDir}") +backup.%Y-%m-%d)"
echo "Target dir: ${targetDir}"

mkdir -p "${targetDir}"

echo "Deleting backups older than the ${RETENTION} most recent"
ls -1p "${mountDir}" | \
    grep -P '^backup\.\d{4}-\d{2}-\d{2}/$' | \
    head -n-${RETENTION} | \
    xargs -I {} rm -rf -- "${mountDir}/{}"

echo "Starting backup"
rsync --archive --delete --human-readable "${backupDir}" "${targetDir}"

tree -L 2 "${mountDir}"

closeluks ${name}

echo -e '\nDone\n'
echo How to close:
echo umount /tmp/backup
echo "cryptdisks_stop ${name}"
